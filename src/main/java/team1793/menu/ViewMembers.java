package team1793.menu;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import team1793.HourLogger;
import team1793.data.MemberTableModel;
import team1793.dialog.AddMember;
import team1793.dialog.RemoveMember;
import team1793.utils.CSVUtils;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static team1793.HourLogger.memberList;

/**
 * Created by tyler on 10/8/16.
 */
public class ViewMembers implements IMenu {
    private JPanel rootPanel;

    private JButton addMember;
    private JButton addMemberList;
    private JButton removeMember;
    private JButton back;

    private JLabel memberQR;

    private JTable memberTable;

    public ViewMembers() {
        $$$setupUI$$$();
        update();
        ActionListener listener = e -> {
            String c = e.getActionCommand();
            switch (c) {
                case "back":
                    HourLogger.setMenu(new MainMenu());
                    break;
                case "addMember":
                    new AddMember();
                    break;
                case "removeMember":
                    int[] rows = memberTable.getSelectedRows();
                    new RemoveMember(IntStream.range(0, rows.length).mapToObj(i -> memberList.get(i)).collect(Collectors.toList()), this);

                    break;
                case "addMany":
                    JFileChooser chooser = new JFileChooser();
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV Files", "csv");
                    chooser.setFileFilter(filter);
                    int returnVal = chooser.showOpenDialog(rootPanel);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = chooser.getSelectedFile();
                        CSVUtils.addMemberList(file);
                        System.out.println("You chose to open this file: " +
                                chooser.getSelectedFile().getName());
                    }
                    break;
            }
        };

        back.addActionListener(listener);
        addMember.addActionListener(listener);
        removeMember.addActionListener(listener);
        addMemberList.addActionListener(listener);
        rootPanel.validate();

        memberTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (memberTable.getSelectedRow() > -1) {
                }
            }
        });
    }

    @Override
    public Container getContentPane() {
        return rootPanel;
    }

    @Override
    public void update() {
        setTableData();
    }

    public void setTableData() {
        memberTable.setModel(new MemberTableModel(memberList));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridBagLayout());
        rootPanel.setBackground(new Color(-12828863));
        rootPanel.setEnabled(true);
        rootPanel.setMaximumSize(new Dimension(-1, -1));
        rootPanel.setMinimumSize(new Dimension(500, 400));
        rootPanel.setPreferredSize(new Dimension(500, 400));
        final JScrollPane scrollPane1 = new JScrollPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(20, 20, 20, 20);
        rootPanel.add(scrollPane1, gbc);
        memberTable = new JTable();
        scrollPane1.setViewportView(memberTable);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(10, 10, 10, 10), -1, -1));
        panel1.setBackground(new Color(-12828863));
        panel1.setEnabled(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        rootPanel.add(panel1, gbc);
        removeMember = new JButton();
        removeMember.setActionCommand("removeMember");
        removeMember.setText("Remove Member");
        panel1.add(removeMember, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        back = new JButton();
        back.setActionCommand("back");
        back.setLabel("Back");
        back.setText("Back");
        panel1.add(back, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addMemberList = new JButton();
        addMemberList.setActionCommand("addMany");
        addMemberList.setFont(new Font(addMemberList.getFont().getName(), addMemberList.getFont().getStyle(), 11));
        addMemberList.setText("Add Members from File");
        panel1.add(addMemberList, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addMember = new JButton();
        addMember.setActionCommand("addMember");
        addMember.setText("Add Member");
        panel1.add(addMember, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
