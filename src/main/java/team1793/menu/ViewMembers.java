package team1793.menu;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import team1793.HourLogger;
import team1793.data.Member;
import team1793.dialog.AddMember;
import team1793.dialog.EditMember;
import team1793.dialog.RemoveMember;
import team1793.utils.CSVUtils;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;

/**
 * Created by tyler on 10/8/16.
 */
public class ViewMembers implements IMenu {
    private JList<Member> memberList;
    private JPanel rootPanel;
    private JSplitPane split;
    private JTextPane memberInfo;
    private JButton addMember;
    private JButton removeMember;
    private JButton back;
    private JLabel memberQR;
    private JList memberDays;
    private JButton addMemberList;
    private JScrollPane scroll;
    private JScrollPane scroll2;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public ViewMembers() {
        update();
        memberInfo.setEditable(false);
        memberList.addListSelectionListener(e -> updateInfo());
        ActionListener listener = e -> {
            String c = e.getActionCommand();
            switch (c) {
                case "back":
                    HourLogger.setMenu(new MainMenu());
                    break;
                case "addMember":
                    new AddMember();
                    break;
                case "removeMember":
                    new RemoveMember(memberList.getSelectedValuesList(), this);
                    break;
                case "editMember":
                    if (memberList.getSelectedValue() != null) {
                        new EditMember(memberList.getSelectedValue());
                    }
                    break;
                case "addMany":
                    JFileChooser chooser = new JFileChooser();
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV Files", "csv");
                    chooser.setFileFilter(filter);
                    int returnVal = chooser.showOpenDialog(rootPanel);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = chooser.getSelectedFile();
                        CSVUtils.addMemberList(file);
                        System.out.println("You chose to open this file: " +
                                chooser.getSelectedFile().getName());
                    }
                    break;
            }
        };
        split.setDividerLocation(.5);
        back.addActionListener(listener);
        addMember.addActionListener(listener);
        removeMember.addActionListener(listener);
//        editMember.addActionListener(listener);
        addMemberList.addActionListener(listener);
        rootPanel.validate();
    }

    @Override
    public Container getContentPane() {
        return rootPanel;
    }

    public void updateInfo() {
        if (memberList.getSelectedValue() != null) {
            Member member = memberList.getSelectedValue();
            BufferedImage qrCode;
            try {
                qrCode = ImageIO.read(member.getQR());
                memberQR.setIcon(new ImageIcon(qrCode));
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            memberInfo.setText("Total Minutes:" + String.valueOf(member.getTotalMinutes()) + "\n");
            //noinspection unchecked
            memberDays.setListData((Vector<Member>) member.getFormattedDays());
        } else {
            memberInfo.setText("");
            memberQR.setIcon(null);
            memberDays.clearSelection();
        }
    }

    @Override
    public void update() {
        memberList.setListData(HourLogger.getMemberArray());
        updateInfo();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridBagLayout());
        rootPanel.setBackground(new Color(-12828863));
        rootPanel.setEnabled(true);
        rootPanel.setMaximumSize(new Dimension(-1, -1));
        rootPanel.setMinimumSize(new Dimension(500, 400));
        rootPanel.setPreferredSize(new Dimension(500, 400));
        split = new JSplitPane();
        split.setAutoscrolls(false);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(20, 20, 20, 20);
        rootPanel.add(split, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        panel1.setBackground(new Color(-1));
        panel1.setEnabled(true);
        split.setLeftComponent(panel1);
        memberQR = new JLabel();
        memberQR.setBackground(new Color(-1));
        memberQR.setText("");
        panel1.add(memberQR, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-1));
        panel2.setEnabled(true);
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        memberInfo = new JTextPane();
        memberInfo.setBackground(new Color(-1));
        memberInfo.setEnabled(true);
        panel2.add(memberInfo, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, new Dimension(-1, 20), 0, false));
        scroll2 = new JScrollPane();
        panel2.add(scroll2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        memberDays = new JList();
        memberDays.setBackground(new Color(-1));
        memberDays.setEnabled(true);
        scroll2.setViewportView(memberDays);
        scroll = new JScrollPane();
        split.setRightComponent(scroll);
        memberList = new JList();
        memberList.setBackground(new Color(-1));
        memberList.setEnabled(true);
        scroll.setViewportView(memberList);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 3, new Insets(10, 10, 10, 10), -1, -1));
        panel3.setBackground(new Color(-12828863));
        panel3.setEnabled(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        rootPanel.add(panel3, gbc);
        removeMember = new JButton();
        removeMember.setActionCommand("removeMember");
        removeMember.setText("Remove Member");
        panel3.add(removeMember, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        back = new JButton();
        back.setActionCommand("back");
        back.setLabel("Back");
        back.setText("Back");
        panel3.add(back, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addMemberList = new JButton();
        addMemberList.setActionCommand("addMany");
        addMemberList.setFont(new Font(addMemberList.getFont().getName(), addMemberList.getFont().getStyle(), 11));
        addMemberList.setText("Add Members from File");
        panel3.add(addMemberList, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addMember = new JButton();
        addMember.setActionCommand("addMember");
        addMember.setText("Add Member");
        panel3.add(addMember, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
